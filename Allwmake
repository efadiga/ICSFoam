#!/bin/sh

# Help message
printHelp()
{
    echo " "
    echo " Usage: ./Allwmake [option]"
    echo ""
    echo "options:"
    echo "  -h       | -help           : Show help"
    echo "  -cu [N]  | -cuda [N]       : Compile with cuda enabled and compute"
    echo "                               capability N if specified"
    echo "  -am      | -amgx           : Compile AMGx solver"
    echo "  -cl      | -clean          : Launch wclean script in all subfolders"
    echo "  -jN      | -j N | -j       : Compile using all or specified N"
    echo "                               cores / hyperthreads"
    echo ""
};

# Create files list
createFileList()
{
    cd src/Make
    if [[ "${have_amgx}" == "true" ]]; then :
        cat files.amgx files.in > files
    else
        cat files.in > files
    fi
    cd ../..
};

#------------------------------------------------------------------------------
# Initialize variables
#------------------------------------------------------------------------------

# Nvidia GPU compute capacity
export NVARCH=80

# Default options
export have_cuda=false
export have_amgx=false
export LAUNCH_WCLEAN=false
export WM_ARGUMENTS=""

#------------------------------------------------------------------------------
# Parse arguments and options
#------------------------------------------------------------------------------

while [ "$#" -gt 0 ]
do
    case "$1" in
        ('') ;;
        (- | --) shift; break ;;  # Stop option parsing

        # Show help
        -h | -help*)
            printHelp
            exit
            ;;

        # Compile cuda version
        -cu | -cuda*)
            export have_cuda=true
            echo "Detected CUDA flag, setting have_cuda=$have_cuda"
            case "$2" in
            [0-9]*)
                if [[ "$2" -ge 5 ]] && [[ "$2" -le 9 ]]; then :
                    export NVARCH="${2}0"
                    shift
                elif [[ "$2" -ge 50 ]] && [[ "$2" -le 90 ]]; then :
                    export NVARCH="${2}"
                    shift
                fi
                ;;
            esac
            ;;

        # Compile AMGx version
        -am | -amgx*)
            export have_amgx=true
            ;;

        # Clean all subdirectories
        -cl | -clean*)
            export LAUNCH_WCLEAN=true
            ;;

        # Parallel compilation on all cores (or specified number of cores)
        -j)
            export WM_NCOMPPROCS="0"
            case "$2" in
            [0-9]*)
                if WM_NCOMPPROCS="$(expr 0 + "$2" 2>/dev/null)"
                then
                    shift
                fi
                ;;
            esac
            ;;

         # Parallel compilation on specified number of cores
        -j[1-9]*)
            export WM_NCOMPPROCS="${1#-j}"
            echo "Compiling enabled on $WM_NCOMPPROCS cores" 1>&2
            ;;

        # Default
        *)
            break
            ;;

    esac
    shift
done

if [[ ! -z ${WM_NCOMPPROCS} ]]; then :
    WM_ARGUMENTS+=" -j"
    if [[ ! "${WM_NCOMPPROCS}" == "0" ]]; then :
        WM_ARGUMENTS+=" ${WM_NCOMPPROCS}"
    fi
fi


#------------------------------------------------------------------------------
# Clean installation
#------------------------------------------------------------------------------

if [[ ${LAUNCH_WCLEAN} == "true" ]]; then :

    # Clean ICSFOAM library
    cd src
        if [[ ! -f Make/files ]]; then :
            createFileList
        fi
        wclean
        rm -rf lnInclude
        rm -rf ${FOAM_USER_LIBBIN}/libICSFoam.so
    cd ..

    # Exit script without compiling
    exit
fi

# Check if AmgX folder is valid
if [[ "${have_amgx}" == "true" ]]; then :
    if [[ ! -d "${AMGX_INC}" ]]; then :
        echo "ERROR: Environment variable \"AMGX_INC\" does not point to a valid folder."
        echo "Please set up AMGX_INC so that it points to AmgX include folder."
        exit 1
    fi
    if [[ ! -d "${AMGX_LIB}" ]]; then :
        echo "ERROR: Environment variable \"AMGX_LIB\" does not point to a valid folder."
        echo "Please set up AMGX_LIB so that it points to AmgX build folder."
        exit 1
    fi
fi

createFileList
#------------------------------------------------------------------------------
# Launch installation
#------------------------------------------------------------------------------

cd ${0%/*} || exit 1                         # Run from this directory
targetType=libso
#. "${WM_PROJECT_DIR:?}"/wmake/scripts/AllwmakeParseArguments

#------------------------------------------------------------------------------

wmake ${WM_ARGUMENTS} $targetType src

cd applications && { ./Allwmake; cd ..; }
